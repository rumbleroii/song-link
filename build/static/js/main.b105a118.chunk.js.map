{"version":3,"sources":["App.js","index.js"],"names":["App","useState","currentAccount","setCurrentAccount","msg","setMsg","notif","setNotif","allWaves","setAllWaves","contractAddress","contractABI","abi","checkIfWalletIsConnected","a","window","ethereum","console","log","request","method","accounts","length","account","connectWallet","alert","location","reload","wave","message","provider","ethers","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","getTotalWaves","count","toNumber","gasLimit","waveTxn","hash","wait","getAllWaves","waves","wavesCleaned","forEach","push","address","waver","timestamp","Date","useEffect","onNewWave","from","prevState","on","off","checkSpotifyURL","link","url","URL","host","pathname","includes","path","str","XMLHttpRequest","open","onreadystatechange","readyState","status","send","error","className","onClick","style","marginLeft","color","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","reverse","map","index","etherscan","key","backgroundColor","marginTop","padding","src","width","height","frameBorder","allowfullscreen","allow","toString","href","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b105a118.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport { ethers } from \"ethers\";\r\nimport abi from \"./utils/songLinkPortal.json\";\r\n\r\nconst App = () => {\r\n  const [currentAccount, setCurrentAccount] = useState(\"\");\r\n  const [msg, setMsg] = useState(\"\");\r\n  const [notif, setNotif] = useState(\"\");\r\n  const [allWaves, setAllWaves] = useState();\r\n  const contractAddress = \"0x1b73f29c3B77cADa0472613582A98ad6b850B98E\";\r\n  const contractABI = abi.abi;\r\n\r\n  const checkIfWalletIsConnected = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (!ethereum) {\r\n        console.log(\"Make sure you have metamask!\");\r\n        return;\r\n      } else {\r\n        console.log(\"We have the ethereum object ( metamask )\", ethereum);\r\n      }\r\n\r\n      const accounts = await ethereum.request({ method: \"eth_accounts\" });\r\n\r\n      if (accounts.length !== 0) {\r\n        const account = accounts[0];\r\n        setNotif(`Found an authorized account: ${account}`);\r\n        console.log(\"Found an authorized account: \", account);\r\n        setCurrentAccount(account);\r\n      } else {\r\n        setNotif(\"No authorized account found, Connect Wallet :D\");\r\n        console.log(\"No authorized account found ( ˘︹˘ )\");\r\n      }\r\n\r\n      return true;\r\n    } catch (error) {\r\n      console.log(error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const connectWallet = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (!ethereum) {\r\n        alert(\"Get MetaMask!\");\r\n        return;\r\n      }\r\n\r\n      const accounts = await ethereum.request({\r\n        method: \"eth_requestAccounts\",\r\n      });\r\n\r\n      console.log(\"Connected\", accounts[0]);\r\n      setNotif(\"Connected :D\");\r\n      setCurrentAccount(accounts[0]);\r\n      window.location.reload();\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const wave = async (message) => {\r\n    try {\r\n      setNotif(\"Submitting....\");\r\n      const { ethereum } = window;\r\n\r\n      if (ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        const wavePortalContract = new ethers.Contract(\r\n          contractAddress,\r\n          contractABI,\r\n          signer\r\n        );\r\n\r\n        let count = await wavePortalContract.getTotalWaves();\r\n        console.log(\"Retrieved total wave count...\", count.toNumber());\r\n\r\n        const waveTxn = await wavePortalContract.wave(message, {\r\n          gasLimit: 300000,\r\n        });\r\n        console.log(\"Mining...\", waveTxn.hash);\r\n        setNotif(\"Mining... Do Not Refresh\");\r\n\r\n        await waveTxn.wait();\r\n        console.log(\"Mined -- \", waveTxn.hash);\r\n\r\n        count = await wavePortalContract.getTotalWaves();\r\n        console.log(\"Retrieved total wave count...\", count.toNumber());\r\n        setNotif(`Mined! Thanks for the Playlist (ɔ◔‿◔)ɔ ♥`);\r\n      } else {\r\n        console.log(\"Ethereum object doesn't exist!\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      setNotif(\"Transaction Failed\");\r\n    }\r\n  };\r\n\r\n  const getAllWaves = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n      if (ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        const wavePortalContract = new ethers.Contract(\r\n          contractAddress,\r\n          contractABI,\r\n          signer\r\n        );\r\n\r\n        const waves = await wavePortalContract.getAllWaves();\r\n\r\n        let wavesCleaned = [];\r\n        waves.forEach((wave) => {\r\n          wavesCleaned.push({\r\n            address: wave.waver,\r\n            timestamp: new Date(wave.timestamp * 1000),\r\n            message: wave.message,\r\n          });\r\n        });\r\n\r\n        setAllWaves(wavesCleaned);\r\n      } else {\r\n        console.log(\"Ethereum object doesn't exist!\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    let wavePortalContract;\r\n\r\n    const onNewWave = (from, timestamp, message) => {\r\n      console.log(\"NewWave\", from, timestamp, message);\r\n      setAllWaves((prevState) => [\r\n        ...prevState,\r\n        {\r\n          address: from,\r\n          timestamp: new Date(timestamp * 1000),\r\n          message: message,\r\n        },\r\n      ]);\r\n    };\r\n\r\n    if (window.ethereum) {\r\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n      const signer = provider.getSigner();\r\n\r\n      wavePortalContract = new ethers.Contract(\r\n        contractAddress,\r\n        contractABI,\r\n        signer\r\n      );\r\n      wavePortalContract.on(\"NewWave\", onNewWave);\r\n    }\r\n\r\n    return () => {\r\n      if (wavePortalContract) {\r\n        wavePortalContract.off(\"NewWave\", onNewWave);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (checkIfWalletIsConnected()) {\r\n      getAllWaves();\r\n    }\r\n  }, []);\r\n\r\n  const checkSpotifyURL = async(link) => {\r\n    try {\r\n      \r\n      const url = new URL(link.msg);\r\n\r\n      if (url.host === \"open.spotify.com\" && url.pathname.includes(\"playlist\")) {\r\n        const path = url.pathname;\r\n        const str = `https://open.spotify.com/embed${path}`;\r\n\r\n        var request = new XMLHttpRequest();\r\n        request.open(\"GET\", str, true);\r\n\r\n        request.onreadystatechange = function () {\r\n          if (request.readyState === 4) {\r\n            if (request.status >= 400) {\r\n              setNotif(\"Link cannot be reached, Try again :(\");\r\n            } else {\r\n              wave(str);\r\n            }\r\n          }\r\n        };\r\n\r\n        request.send();\r\n      } else {\r\n        setNotif(\"Please enter a Spotify playlist share link only\");\r\n      }\r\n    } catch (error){\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const message = { msg };\r\n    checkSpotifyURL(message);\r\n  };\r\n\r\n  return (\r\n    <div className=\"mainContainer\">\r\n      <div className=\"dataContainer\">\r\n        <div className=\"header\">🎵 Song Link !</div>\r\n\r\n        <div className=\"bio\">Your Playlist on BlockChain!</div>\r\n        <br></br>\r\n\r\n        <div className=\"alert\">{notif}</div>\r\n\r\n        <div className=\"bio\">\r\n          Paste link of your favorite Spotify Playlist. Cooldown time of 15 minutes, if transaction fails, please try after 15 minutes\r\n        </div>\r\n\r\n        {!currentAccount && (\r\n          <button className=\"waveButton\" onClick={connectWallet}>\r\n            Connect Wallet\r\n          </button>\r\n        )}\r\n        <div className=\"mainContainer\">\r\n          Total Number of Playlist:{\" \"}\r\n          <span\r\n            style={{\r\n              marginLeft:\"5px\",\r\n              color: \"red\",\r\n            }}\r\n          >\r\n            {allWaves?.length}\r\n          </span>\r\n        </div>\r\n        {currentAccount && (\r\n          <form className=\"dataContainer\" onSubmit={handleSubmit}>\r\n            <div className=\"mainContainer\">\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Spotify Playlist URL\"\r\n                value={msg}\r\n                onChange={(e) => setMsg(e.target.value)}\r\n              />\r\n            </div>\r\n            <button className=\"waveButton\">Submit</button>\r\n          </form>\r\n        )}\r\n\r\n        {allWaves?.reverse().map((wave, index) => {\r\n          const etherscan =\r\n            \"https://rinkeby.etherscan.io/address/\" + wave.address;\r\n          return (\r\n            <div\r\n              key={index}\r\n              style={{\r\n                backgroundColor: \"OldLace\",\r\n                marginTop: \"20px\",\r\n                padding: \"30px\",\r\n              }}\r\n            >\r\n              <iframe\r\n                src={wave.message}\r\n                width=\"100%\"\r\n                height=\"380\"\r\n                frameBorder=\"0\"\r\n                allowfullscreen=\"\"\r\n                allow=\"autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture\"\r\n              ></iframe>\r\n              <div>Address: {wave.address}</div>\r\n              <div>Time: {wave.timestamp.toString()}</div>\r\n              <span>\r\n                Etherscan Link: <a href={etherscan}>{etherscan}</a>\r\n              </span>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}